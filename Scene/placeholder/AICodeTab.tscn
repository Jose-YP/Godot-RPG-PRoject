[gd_scene load_steps=9 format=3 uid="uid://bb78265xyckm8"]

[ext_resource type="Script" path="res://Code/EnemyAI/AI0_Random.gd" id="1_w5t66"]
[ext_resource type="Script" path="res://Code/EnemyAI/AI1_Buff.gd" id="2_r276m"]
[ext_resource type="Script" path="res://Code/EnemyAI/AI2_Polkan.gd" id="3_3hew2"]
[ext_resource type="Script" path="res://Code/EnemyAI/AI3_Debuff.gd" id="4_lpfcv"]
[ext_resource type="Script" path="res://Code/EnemyAI/AI6_Ireo.gd" id="7_5yef2"]

[sub_resource type="GDScript" id="GDScript_xdlen"]

[sub_resource type="GDScript" id="GDScript_vr683"]
script/source = "extends \"res://Code/SceneCode/Entities/enemy.gd\"

#It needs to have these redefined from enemy, to here
var eData: Enemy
var canBuff: bool = false
var canDebuff: bool = false
var hasItem: bool = false
var debug: bool = true
var allies: Array = []
var opp: Array = []
var buffedNum: Array[int] = []
var buffedFlags: Array[int] = []
var debuffedNum: Array[int] = []
var debuffedFlags: Array[int] = []

func basicSelect(allowed) -> Move:
	buffedNum = []
	buffedFlags = []
	debuffedNum = []
	debuffedFlags = []
	allAllies = allies
	allOpposing = opp
	
	print(\"DEBUFF\", groupBuffStatus(\"Opposing\"))
	for entity in groupBuffStatus(\"Opposing\"): #DEBUFF IF NOT DEBUFFED
		debuffedNum.append(0)
		debuffedFlags.append(0)
		for debuff in range(entity.size()):
			var debuffFlag = int(pow(2,debuff))
			if not (debuffFlag & eData.oppBoostTypePreference): continue
			
			if entity[debuff] > eData.oppBuffAmmountPreference:
				#1 for atk, 2, for def, 4 for spd, and 8 for luk
				debuffedFlags[-1] += debuffFlag
				debuffedNum[-1] += 1
		
		#Check if they have proper ammount of buffs
		if debuffedNum[-1] > eData.oppBuffNumPreference:
			canDebuff = true
	
	if canDebuff and randi_range(0,100) <= 45:
		canDebuff = false
		actionMode = action.DEBUFF
		
		print(\"Debuffing\")
		for entity in (opp.size()): #Must have buff moves of that type to be viable
			
			focusIndex = opp[entity].ID
			
			if (debuffedFlags[entity] & 1 and 
			getFlagMoves(allowed, \"Debuff\", 1).size() != 0):
				return getFlagMoves(allowed, \"Debuff\", 1).pick_random()
			
			if (debuffedFlags[entity] & 2 and 
			getFlagMoves(allowed, \"Debuff\", 2).size() != 0):
				return getFlagMoves(allowed, \"Debuff\", 2).pick_random()
			
			if (debuffedFlags[entity] & 4 and 
			getFlagMoves(allowed, \"Debuff\", 4).size() != 0):
				return getFlagMoves(allowed, \"Debuff\", 4).pick_random()
			
			if (debuffedFlags[entity] & 8 and 
			getFlagMoves(allowed, \"Debuff\", 8).size() != 0):
				return getFlagMoves(allowed, \"Debuff\", 8).pick_random()
	
	elif canDebuff: print(\"Missed chance\")
	
	for entity in groupBuffStatus(\"Ally\"): #BUFF IF NOT BUFFED
		buffedNum.append(0)
		buffedFlags.append(0)
		for buff in range(entity.size()):
			#Skip any stats ai doesn't care about
			var buffFlag = int(pow(2,buff))
			if not (buffFlag & eData.allyBoostTypePreference): continue
			
			if entity[buff] < eData.allyBuffAmmountPreference:
				#1 for atk, 2, for def, 4 for spd, and 8 for luk
				buffedFlags[-1] += buffFlag
				buffedNum[-1] += 1
		
		#Check if they have proper ammount of buffs
		if buffedNum[-1] > eData.allyBuffNumPreference:
			canBuff = true
	
	if canBuff and randi_range(0,100) <= 40:
		canBuff = false
		actionMode = action.BUFF
		print(\"Buffing\")
		for entity in range(allies.size()): #Must have buff moves of that type to be viable
			focusIndex = allies[entity].ID
			
			if (buffedFlags[entity] | 1
			 and getFlagMoves(allowed, \"Buff\", 1).size() != 0):
				return getFlagMoves(allowed, \"Buff\", 1).pick_random()
			
			if (buffedFlags[entity] | 2
			 and getFlagMoves(allowed, \"Buff\", 2).size() != 0):
				return getFlagMoves(allowed, \"Buff\", 2).pick_random()
			
			if (buffedFlags[entity] | 4
			 and getFlagMoves(allowed, \"Buff\", 4).size() != 0):
				return getFlagMoves(allowed, \"Buff\", 4).pick_random()
			
			if (buffedFlags[entity] | 8
			 and getFlagMoves(allowed, \"Buff\", 8).size() != 0):
				return getFlagMoves(allowed, \"Buff\", 8).pick_random()
	
	elif canBuff: print(\"Missed chance\")
	
	#HEAL CHECK
	#--------------
	var lowHPArray = groupLowHealth(\"Ally\", eData.allyHPPreference)
	var foundLow: int = 0
	#Is there an item that heals?
	if getHealMoves(allowed, \"Ailment\").size() != 0 and randi_range(0,100) < 30:
		for entity in groupAilments(\"Ally\", true):
			if ((entity[0] == \"Mental\" or entity[0] == \"Chemical\")
			and entity[1] > eData.allyAilmentPreference):
				actionMode = action.AILHEAL
				focusIndex = entity.ID
				return getHealMoves(allowed, \"Ailment\").pick_random()
	
	if getHealMoves(allowed, \"HP\").size() != 0 and randi_range(0,100) < 30: 
		for entityLow in lowHPArray:
			if entityLow:
				foundLow += 1
				break
		
		if foundLow != 0:
			actionMode = action.HEAL
			return getHealMoves(allowed, \"HP\").pick_random()
	
	#DEFAULT ATTACK
	#--------------
	lowHPArray = groupLowHealth(\"Opposing\", eData.oppHPPreference)
	foundLow = 0
	for entityLow in lowHPArray:
		if entityLow:
			foundLow += 1
	
	if foundLow == 0 or randi_range(0,100) > 25:
		var damaging = getDamagingMoves(allowed)
		return damaging.pick_random()
	else:
		actionMode = action.KILL
		return getHighDamage(allowed)

#-----------------------------------------
#TARGETTING
#-----------------------------------------
func Single(targetting, _move):
	#incase it doesn't work
	var defenderIndex: int = randi() % targetting.size()
	match actionMode:
		action.KILL:
			var seeking = groupLeastHealth(\"Opposing\",eData.oppHPPreference)
			for entity in range(targetting.size()):
				if targetting[entity] == seeking:
					defenderIndex = entity
					break
		
		action.HEAL:
			var seeking = groupLeastHealth(\"Ally\", eData.allyHPPreference)
			for entity in range(targetting.size()):
				if targetting[entity] == seeking:
					defenderIndex = entity
					break
		
		action.ETC:
			defenderIndex = randi() % targetting.size()
		
		_:
			for entity in range(targetting.size()): 
				if targetting[entity].ID == focusIndex:
					defenderIndex = entity
	
	#Remember to reset Action Mode
	actionMode = action.ETC
	return defenderIndex

func Group(targetting):
	var defenderIndex: int
	match actionMode:
		action.KILL:
			var seeking = groupLeastHealth(\"Opposing\",eData.oppHPPreference)
			
			for entityGroup in range(targetting.size()):
				for entity in range(targetting[entityGroup].size()):
					if targetting[entityGroup][entity] == seeking:
						defenderIndex = entityGroup
						break
		
		action.ETC:
			defenderIndex = randi() % targetting.size()
			
		_:
			for entityGroup in range(targetting.size()):
				for entity in range(targetting[entityGroup].size()):
					if targetting[entityGroup][entity].ID == focusIndex:
						defenderIndex = entityGroup
						break
	
	actionMode = action.ETC
	return defenderIndex
"

[sub_resource type="GDScript" id="GDScript_possf"]
script/source = "extends \"res://Code/SceneCode/Entities/enemy.gd\"

var eData: Enemy
var canBuff: bool = false
var allies: Array = []
var opp: Array = []
var buffedNum: Array[int] = []
var buffedFlags: Array[int] = []

func basicSelect(allowed):
	var canAilm: bool = false
	
	for entity in groupAilments(\"Opposing\", true):
		if (entity != \"Mental\" or entity != \"Chemical\"):
			canAilm = true
	
	if canAilm:
		for entity in opp:
			if entity.data.AilmentNum < eData.oppAilmentPreference:
				focusIndex = entity.ID
				return getEnumMoves(allowed, \"Ailment\").pick_random()
	
	var index = randi()%allowed.size()
	return allowed[index]

#-----------------------------------------
#TARGETTING
#-----------------------------------------
func Single(targetting, _move):
	var defenderIndex = randi() % targetting.size()
	return defenderIndex

func Group(targetting, _move):
	var defenderIndex = randi() % targetting.size()
	return defenderIndex
"

[node name="Random" type="Node"]
editor_description = "JUST HERE TO HOLD ENEMY AIS FOR EASY ACCESS"
script = ExtResource("1_w5t66")

[node name="Globals" type="Node" parent="."]
script = SubResource("GDScript_xdlen")

[node name="AI1_Buff" type="Node" parent="."]
editor_description = "Basic Buff"
script = ExtResource("2_r276m")

[node name="AI2_Polkan" type="Node" parent="."]
editor_description = "Polkan"
script = ExtResource("3_3hew2")

[node name="AI3_Debuff" type="Node" parent="."]
script = ExtResource("4_lpfcv")

[node name="AI4_Healer" type="Node" parent="."]
script = SubResource("GDScript_vr683")

[node name="AI5_Ailment" type="Node" parent="."]
script = SubResource("GDScript_possf")

[node name="AI6_Ireo" type="Node" parent="."]
script = ExtResource("7_5yef2")
